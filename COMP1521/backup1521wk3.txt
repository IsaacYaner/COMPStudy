// COMP1521 19t2 ... lab 03: Make a Float
// maf.c: read in bit strings to build a float value
// Written by John Shepherd, August 2017
// Completed by ...

#include <assert.h>
#include <err.h>
#include <inttypes.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sysexits.h>

typedef uint32_t word;
typedef unsigned __int128 Word;

typedef struct float16 {
	Word frac : 10, exp : 5, sign : 1;
} float16;

typedef struct float32 {
	Word frac : 23, exp : 8, sign : 1;
} float32;

typedef struct float64 {

	Word frac : 52, exp : 11, sign : 1;

} float64;

typedef struct float80 {
	Word frac : 64, exp : 15, sign : 1;
}float80;

typedef struct float128 {
	Word frac : 112, exp : 15, sign : 1;
} float128;

typedef union bits32 {
	float fval;   // interpret the bits as a float
	word xval;    // interpret as a single 32-bit word
	float32 bits; // manipulate individual bits
} bits32;

typedef union bitsex {
	float fval;
	double dval;   // interpret the bits as a float
	long double qval; //128 bits 
	
	Word xval;    // interpret as a single 32-bit word

	float16 hbits;
	float32 fbits;
	float64 dbits; // manipulate individual bits
	float80 ebits;
	float128 qbits;

} bitsex;

void checkArgs (int, char **);
bits32 getBits (char *, char *, char *);
bitsex getBits_ex (char *, char *, char *, int bits);
char *showBits (word, char *);
char *showBits_ex (word, char *, int bits);
bool justBits (char *, int);

int main (int argc, char **argv)
{
	bitsex u;
	char out[50];

	// here's a hint ...
	//u.bits.sign = u.bits.exp = u.bits.frac = 0;

	// check command-line args (all strings of 0/1
	// kills program if args are bad
	checkArgs (argc, argv);

	// convert command-line args into components of
	// a float32 inside a bits32, and return the union
	u = getBits_ex (argv[1], argv[2], argv[3], 32);

	printf ("bits : %s\n", showBits (u.xval, out));
	printf ("float: %0.10f\n", u.val);

	return EXIT_SUCCESS;
}

// convert three bit-strings (already checked)
// into the components of a struct _float
bits32 getBits (char *sign, char *exp, char *frac)
{
	bits32 new;
	// convert char *sign into a single bit in new.bits
	new.bits.sign = *sign - '0';
	// convert char *exp into an 8-bit value in new.bits
	for(int i = 0; i < 8; i++)
	{
		new.bits.exp <<= 1;
		new.bits.exp += exp[i] - '0';
	}
	// convert char *frac into a 23-bit value in new.bits
	for(int i = 0; i < 23; i++)
	{
		new.bits.frac <<= 1;
		new.bits.frac += frac[i] - '0';
	}
	return new;
}

bitsex getBits_ex (char *sign, char *exp, char *frac, int bits)
{
	bitsex new;
	// convert char *sign into a single bit in new.bits
	new.fbits.sign = *sign - '0';
	int expdigits, fracdigits;
	if(bits == 32)
	{
		expdigits = 8;
		fracdigits = 23;
	}
	// convert char *exp into an 8-bit value in new.bits
	for(int i = 0; i < expdigits; i++)
	{
		new.fbits.exp <<= 1;
		new.fbits.exp += exp[i] - '0';
	}
	// convert char *frac into a 23-bit value in new.bits
	for(int i = 0; i < fracdigits; i++)
	{
		new.fbits.frac <<= 1;
		new.fbits.frac += frac[i] - '0';
	}
	return new;
}

// convert the 32-bit bit-string in val into
// a sequence of '0' and '1' characters in buf
// assume that buf has size > 32
// return a pointer to buf
char *showBits (word val, char *buf)
{
	for(int i = 0; i < 32; i++)
	{
		buf[31 - i] = (val & 1) + '0';
		val >>= 1;
	}
	for(int i = 31; i >= 9; i--)
	{
		buf[i + 2] = buf[i];
	}
	buf[10] = ' ';
	for(int i = 8; i >= 1; i--)
	{
		buf[i + 1] = buf[i];
	}
	buf[1] = ' ';
	buf[34] = '\0';	
	return buf;
}

// checks command-line args
// need at least 3, and all must be strings of 0/1
// never returns if it finds a problem
void checkArgs (int argc, char **argv)
{
	if (argc < 3)
		errx (EX_USAGE, "usage: %s Sign Exp Frac", argv[0]);

	if (! justBits (argv[1], 1))
		errx (EX_DATAERR, "invalid Sign: %s", argv[1]);
	if (! justBits (argv[2], 8) && ! justBits (argv[2], 11))//! justBits (argv[2], )
		errx (EX_DATAERR, "invalid Exp: %s",  argv[2]);
	if (! justBits (argv[3], 23) && ! justBits (argv[3], 52))//! justBits (argv[3], )
		errx (EX_DATAERR, "invalid Frac: %s", argv[3]);

	return;
}

// check whether a string is all 0/1 and of a given length
bool justBits (char *str, int len)
{
	assert (len >= 0);
	if (strlen (str) != (size_t) len)
		return false;

	while (*str != '\0') {
		if (*str != '0' && *str != '1')
			return false;
		str++;
	}
	return true;
}
