% Yiyan Yang
% z5183946
% Assignment 1-Prolog and Search

% sumsq_even(+Numbers, -Sum) - Success if Sum is the sum of the square of even numbers in the Numbers list.
%   Numbers must be instantiated when called.
% Example:
% ?-sumsq_even([1,2], V).
% V = 4;
% false;

% The sum for a empty list is zero as there is no element.
sumsq_even([],0).

% If Head is even, add the square of Head to the value of remaining list.
sumsq_even([Head|Tail], Sum) :-
    0 is Head mod 2,
    sumsq_even(Tail, SubSum),
    Sum is Head * Head + SubSum.

% If Head is Odd, assign Value of remaining list to Sum.
sumsq_even([Head|Tail], Sum):-
    1 is Head mod 2,
    sumsq_even(Tail, Sum).



% log_table(+NumberList, -ResultList) - Success if ResultList contains a list of number-log of number pairs.
% NumberList must be instantiated when called.
% Example:
% ?-log_table([1,5],Result).
% Reslut = [[1, 0.0], [5, 1.6094379124341003]].

% The result table is empty if NumberList is empty.
log_table([], []).

% The RHead of the current Result is the pair of the Head of NumberList, and the RTail is generated by recursive calls.
% In addition, if any negative number occurs, return false.
log_table([Head|Tail], [[Head, RHead] | RTail]) :-
    Head >= 0,
    RHead is log(Head),
    log_table(Tail, RTail).


% par(+Head, +[H|_])
% true if Head and H has the same parity
par(Head, [H|_]) :-
    0 is (Head + H) mod 2.

% npar(+Head, +[H|_])
% true if Head and H has different parity
npar(Head, [H|_]) :-
    1 is (Head + H) mod 2.

% paruns(+List, -RunList) - Successs if RunList contains a list of list of successive numbers with in List
% that have the same parity.
% Example:
% ?-paruns([1,2,4,6,-2,1,5,5,2], Result).
% Result = [[1], [2, 4, 6, -2], [1, 5, 5], [2]].

% If the List given is empty, the RunList should also be empty.
paruns([], []).

% If the List contains only one element, RunList should be identical to List.
paruns([A], [[A]]).

% Head of List should be appended as the head of RunList.
% If the parity of Head is different from that of the head of RunList of Tail, create a new list and append to the head
paruns([Head|Tail], [[Head] | SubRun]):-
    paruns(Tail, SubRun),
    npar(Head, Tail).

% If the parity of them are the same, simply append to the head.
paruns([Head|Tail], [[Head | SubRun]|R]):-
    paruns(Tail, [SubRun|R]),
    par(Head, Tail).

% eval(+Expr, -Val) - Success if Val is the value of prefix arithmetic expression Expr.
% Example:
% ?-eval(add(mul(1,2),4), Value)
% Value = 6.

% For a single number, Result is the number given.
eval(Result, Result) :-
    number(Result).

% For arithmetic operations, eval the two Parameters and then combine them together as Result.
% For addition
eval(add(Param1, Param2), Result):-
    eval(Param1, Res1),
    eval(Param2, Res2),
    Result is Res1 + Res2.

% For substraction
eval(sub(Param1, Param2), Result):-
    eval(Param1, Res1),
    eval(Param2, Res2),
    Result is Res1 - Res2.

% For multiplication
eval(mul(Param1, Param2), Result):-
    eval(Param1, Res1),
    eval(Param2, Res2),
    Result is Res1 * Res2.

% For division
eval(div(Param1, Param2), Result):-
    eval(Param1, Res1),
    eval(Param2, Res2),
    Result is Res1 / Res2.


 