// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/29/2019 12:47:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    part1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module part1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [0:0] KEY;
reg [1:0] SW;
// wires                                               
wire [0:0] LEDG;
wire [8:0] LEDR;

// assign statements (if any)                          
part1 i1 (
// port map - connection between master ports and signals/registers   
	.KEY(KEY),
	.LEDG(LEDG),
	.LEDR(LEDR),
	.SW(SW)
);
initial 
begin 
#1000000 $finish;
end 

// KEY[0]
always
begin
	KEY[0] = 1'b0;
	KEY[0] = #10000 1'b1;
	#10000;
end 

// SW[1]
initial
begin
	SW[1] = 1'b0;
	SW[1] = #50000 1'b1;
	SW[1] = #20000 1'b0;
	SW[1] = #80000 1'b1;
	SW[1] = #90000 1'b0;
	SW[1] = #40000 1'b1;
	SW[1] = #150000 1'b0;
end 

// SW[0]
initial
begin
	SW[0] = 1'b1;
	SW[0] = #15264 1'b0;
	SW[0] = #19414 1'b1;
	SW[0] = #330783 1'b0;
	SW[0] = #11559 1'b1;
	SW[0] = #512980 1'b0;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

